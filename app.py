import streamlit as st
import pandas as pd
from oandapyV20 import API
import oandapyV20.endpoints.instruments as instruments
import time as time_module

# --- CONFIGURATION ---
# REMPLACEZ AVEC VOS PROPRES IDENTIFIANTS OANDA
OANDA_ACCOUNT_ID = "101-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"  # REMPLACEZ ICI
OANDA_ACCESS_TOKEN = "ac365b55exxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" # REMPLACEZ ICI

# Liste des instruments √† scanner
INSTRUMENTS_TO_SCAN = [
    "EUR_USD", "GBP_USD", "USD_JPY", "AUD_USD", "USD_CAD",
    "XAU_USD",  # Or
    "US30_USD", # Dow Jones
    "NAS100_USD",# Nasdaq 100
    "SPX500_USD" # S&P 500
]

# Unit√©s de temps √† scanner (Format API Oanda)
TIME_FRAMES = {
    "H1": "H1",
    "H4": "H4",
    "D1": "D",
    "Weekly": "W"
}

# Param√®tres de l'indicateur (comme dans TradingView)
FRACTAL_LENGTH = 5 # 'length' dans le script TV
RECENT_BARS_THRESHOLD = 3 # On ne signale un CHOCH que s'il est apparu dans les X derni√®res bougies

# --- FIN DE LA CONFIGURATION ---

# Initialisation de l'API Oanda
# Attention : Ne partagez jamais votre token d'acc√®s publiquement.
# Il est pr√©f√©rable d'utiliser des variables d'environnement pour plus de s√©curit√©.
try:
    api = API(access_token=OANDA_ACCESS_TOKEN)
except Exception as e:
    st.error(f"Erreur de connexion √† l'API Oanda. V√©rifiez votre token. Erreur: {e}")
    st.stop()


def get_oanda_data(instrument, granularity, count=250):
    """R√©cup√®re les donn√©es de chandeliers depuis Oanda."""
    params = {
        "count": count,
        "granularity": granularity
    }
    r = instruments.InstrumentsCandles(instrument=instrument, params=params)
    try:
        api.request(r)
        data = r.response.get('candles')
        if not data:
            return None
            
        df = pd.DataFrame([
            {
                "time": pd.to_datetime(candle['time']),
                "open": float(candle['mid']['o']),
                "high": float(candle['mid']['h']),
                "low": float(candle['mid']['l']),
                "close": float(candle['mid']['c'])
            } for candle in data if candle['complete']
        ])
        return df
    except Exception as e:
        # st.warning(f"Impossible de r√©cup√©rer les donn√©es pour {instrument} sur {granularity}: {e}")
        return None

def detect_choch(df, length=5):
    """
    Traduction de la logique Pine Script en Python pour d√©tecter les CHoCH.
    Retourne le type de CHOCH ('Bullish' ou 'Bearish') et la date si d√©tect√© r√©cemment, sinon None.
    """
    if df is None or len(df) < length:
        return None, None

    p = length // 2
    
    # D√©tection des fractales (simplifi√©e pour la performance en Python)
    # Une fractale haussi√®re est un point haut entour√© de points hauts plus bas.
    # Une fractale baissi√®re est un point bas entour√© de points bas plus hauts.
    df['is_bull_fractal'] = (df['high'] == df['high'].rolling(window=length, center=True, min_periods=length).max())
    df['is_bear_fractal'] = (df['low'] == df['low'].rolling(window=length, center=True, min_periods=length).min())
    
    os = 0  # Orderflow Switch: 0=neutre, 1=haussier, -1=baissier
    upper_fractal_value = None
    lower_fractal_value = None
    
    choch_signal = None
    choch_time = None
    choch_bar_index = -1

    # On it√®re sur les bougies pour simuler le comportement de TradingView
    for i in range(p, len(df)):
        # Mise √† jour des derni√®res fractales valides
        if df['is_bull_fractal'].iloc[i-p]:
            upper_fractal_value = df['high'].iloc[i-p]
            
        if df['is_bear_fractal'].iloc[i-p]:
            lower_fractal_value = df['low'].iloc[i-p]

        # Logique de d√©tection du CHoCH
        current_close = df['close'].iloc[i]
        previous_close = df['close'].iloc[i-1]

        # 1. V√©rification de la cassure haussi√®re (crossover)
        if upper_fractal_value is not None and current_close > upper_fractal_value and previous_close <= upper_fractal_value:
            # Est-ce un CHoCH ? (Changement de caract√®re)
            if os == -1:
                choch_signal = "Bullish CHoCH"
                choch_time = df['time'].iloc[i]
                choch_bar_index = i
            # Mise √† jour de l'√©tat du march√© √† "haussier"
            os = 1
            # On "consomme" la fractale pour √©viter de la red√©clencher
            upper_fractal_value = None 

        # 2. V√©rification de la cassure baissi√®re (crossunder)
        if lower_fractal_value is not None and current_close < lower_fractal_value and previous_close >= lower_fractal_value:
            # Est-ce un CHoCH ? (Changement de caract√®re)
            if os == 1:
                choch_signal = "Bearish CHoCH"
                choch_time = df['time'].iloc[i]
                choch_bar_index = i
            # Mise √† jour de l'√©tat du march√© √† "baissier"
            os = -1
            # On "consomme" la fractale
            lower_fractal_value = None
            
    # On retourne le signal seulement s'il est r√©cent
    if choch_signal and (len(df) - 1 - choch_bar_index) < RECENT_BARS_THRESHOLD:
        return choch_signal, choch_time
        
    return None, None


def main():
    """Fonction principale de l'application Streamlit."""
    st.set_page_config(page_title="Scanner de CHoCH", layout="wide")
    st.title("üìà Scanner de Change of Character (CHoCH)")
    st.write(f"Bas√© sur la logique de l'indicateur 'Market Structure' de LuxAlgo. Un signal est affich√© s'il est apparu dans les **{RECENT_BARS_THRESHOLD}** derni√®res bougies.")
    st.info("Avertissement : Ce script est fourni √† titre √©ducatif uniquement. Il est bas√© sur une interpr√©tation du script PineScript. Faites toujours vos propres recherches. La licence de l'indicateur original (CC BY-NC-SA 4.0) s'applique √† la logique utilis√©e.")

    # Espace pour afficher le tableau des r√©sultats
    results_placeholder = st.empty()
    
    if st.button('Lancer le Scan'):
        with st.spinner('Scan en cours... Veuillez patienter.'):
            results = []
            total_scans = len(INSTRUMENTS_TO_SCAN) * len(TIME_FRAMES)
            progress_bar = st.progress(0)
            progress_status = st.empty()
            i = 0

            for instrument in INSTRUMENTS_TO_SCAN:
                for tf_name, tf_code in TIME_FRAMES.items():
                    i += 1
                    progress_bar.progress(i / total_scans)
                    progress_status.text(f"Scan de {instrument} sur {tf_name}...")
                    
                    # R√©cup√©ration des donn√©es
                    df = get_oanda_data(instrument, tf_code)
                    
                    if df is not None:
                        # D√©tection du CHoCH
                        signal, signal_time = detect_choch(df, length=FRACTAL_LENGTH)
                        
                        if signal:
                            results.append({
                                "Instrument": instrument,
                                "Timeframe": tf_name,
                                "Signal": signal,
                                "Heure (UTC)": signal_time.strftime('%Y-%m-%d %H:%M')
                            })
                    else:
                        st.warning(f"Donn√©es non disponibles pour {instrument} sur {tf_name}.")

                    time_module.sleep(0.2) # Petite pause pour ne pas surcharger l'API Oanda

            progress_status.success("Scan termin√© !")

            if results:
                results_df = pd.DataFrame(results)
                results_placeholder.table(results_df)
            else:
                results_placeholder.success("‚úÖ Aucun signal de CHoCH r√©cent d√©tect√© sur les paires et unit√©s de temps scann√©es.")

if __name__ == "__main__":
    main()
